var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = ProbabilisticEchoInversion","category":"page"},{"location":"#ProbabilisticEchoInversion.jl","page":"Home","title":"ProbabilisticEchoInversion.jl","text":"","category":"section"},{"location":"#Introduction","page":"Home","title":"Introduction","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Welcome to the documentation for ocumentation for  ProbabilisticEchoInversion!","category":"page"},{"location":"","page":"Home","title":"Home","text":"This package is designed to solve the \"inverse problem\" for acoustic backscatter at multiple frequencies in a Bayesian statistical framework. In other words, given observed  echoes from one or more types of scatterers, this package will help you infer","category":"page"},{"location":"","page":"Home","title":"Home","text":"What they were,\nHow many of them were present, and\nHow sure you can be about (1) and (2). ","category":"page"},{"location":"","page":"Home","title":"Home","text":"We call this approach Automatic Probabilistic Echo Solving, or APES.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This documentation provides a short introduction to the problem and the general approach, as well as a simple tutorial on how to use the package. It assumes basic familiarity with the principles of fisheries acoustics and Bayesian statistical modeling (e.g. experience with Turing.jl, Stan, or JAGS). While the package is written in Julia, we don't assume knowledge of that language, and you should hopefully be able to follow along as long as you are familiar with scientific programming in a similar scripting language like R, Python, or Matlab. Extensive resources for learning Julia are available at the official website.","category":"page"},{"location":"#Background","page":"Home","title":"Background","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The typical approach in fisheries acoustics is to use relative differences in backscatter at multiple frequencies to classify regions of the water column as one thing or another (fish vs. zooplankton, large vs. small fish, etc.). These frequency responses are usually calculated by taking the difference between frequencies in the decibel domain (dB  differencing). Once the echogram has been classified using multiple frequencies, scatterer density is estimated by echo-integrating at a single frequency using the  relationship ","category":"page"},{"location":"","page":"Home","title":"Home","text":"s_v = langle sigma_bs rangle n","category":"page"},{"location":"","page":"Home","title":"Home","text":"(1)","category":"page"},{"location":"","page":"Home","title":"Home","text":"where s_v is the volume backscattering coefficient, langle sigma_bs rangle is the average backscattering cross section of one scatterer, and n is their numerical density.","category":"page"},{"location":"#The-Inverse-Approach","page":"Home","title":"The Inverse Approach","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The inverse approach relies on the same theory and assumptions, but instead of classifying  first using multiple frequencies and then integrating using only one, it does both at  the  same time using all available frequencies. Mathematically, if we have a vector mathbfs_v of backscatter at multiple frequencies and a matrix Sigma of backscattering cross-sections, where the ij^th entry holds langle sigma_bs rangle for species j at frequency i, then solving the inverse problem means finding the vector of scatterer densities mathbfn ge 0 which solves the equation ","category":"page"},{"location":"","page":"Home","title":"Home","text":"mathbfs_v = Sigma mathbfn","category":"page"},{"location":"","page":"Home","title":"Home","text":"(2)","category":"page"},{"location":"","page":"Home","title":"Home","text":"The inverse approach has several advantages over the classify-then-integrate approach:","category":"page"},{"location":"","page":"Home","title":"Home","text":"It uses all available frequency information to integrate, in theory giving a more ","category":"page"},{"location":"","page":"Home","title":"Home","text":"robust estimate of animal density than single-frequency integration.","category":"page"},{"location":"","page":"Home","title":"Home","text":"It extends naturally from a small number of narrowband frequencies to broadband ","category":"page"},{"location":"","page":"Home","title":"Home","text":"spectra, or a mixture of the two.","category":"page"},{"location":"","page":"Home","title":"Home","text":"It can handle mixtures of different scatterers, a situation where dB differencing","category":"page"},{"location":"","page":"Home","title":"Home","text":"struggles.","category":"page"},{"location":"","page":"Home","title":"Home","text":"However, even though the inverse approach has been around for some time, it has never acheived widespread use in practice, because Equation 2 is often (if not usually) underdetermined, and it involves inherent uncertainties that are nonlinear and  potentially difficult to quantify.","category":"page"},{"location":"#Bayesian-Inverse-Modeling","page":"Home","title":"Bayesian Inverse Modeling","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"One way to address these challenges is to implement the inverse problem as a Bayesian statistical model. Like all inversion methods, a Bayesian approach handles species mixtures, uses all  available frequencies, and extends naturally to broadband signals. However, it has  a few distinct advantages. The priors required for a Bayesian model provide a rigorous way to incorporate assumptions, ecological knowledge, and/or information from direct  sampling. Good priors provide the inverse model with additional information, improving the quality of the solution and allowing even underdetermined  problems to be solved. Bayesian models can incorporate multiple sources of uncertainty and propagate them through to the solution, increasing the robustness ofthe results: a well-specified  model should not produce solutions that are simultaneously wrong and confident. Finally, these models are based on physical scattering processes, so their output is fully interpretable, unlike some machine learning methods. Taken together, these  advantages make the inverse approach robust and reliable enough to be used on real-world acoustic data.","category":"page"},{"location":"#Tutorial","page":"Home","title":"Tutorial","text":"","category":"section"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"ProbabilisticEchoInversion.jl is a Julia package, so if you have not installed the Julia  programming language, that's the first thing to do. You can download the latest version it for free from the official website. Even better, use the Juliaup installer/version manager, which  makes it much easier to upgrade when new Julia versions are released, and to maintain  multiple Julia installations on your computer.","category":"page"},{"location":"","page":"Home","title":"Home","text":"You can work with Julia files in any text editor, but for a nice integrated experience, we can recommend Visual Studio Code with the  Julia extension, Jupyter, or  Pluto.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Once you have Julia installed, open the Julia command line (a.k.a. the read-evaluate-print-loop, or REPL). While not required, it is easy and highly recommended to set up a local environment[2]  for each of your projects. To do that for this tutorial, run the following commands:","category":"page"},{"location":"","page":"Home","title":"Home","text":"# create a new folder--could call it whatever you want\njulia> mkdir(\"APESTutorial\")\n\n# change directory to the folder we just created\njulia> cd(\"APESTutorial\")\n\n# type `]` to enter package manager mode\njulia> ]\n\n# activate the current directory as project environment\n(@v1.8) pkg> activate .\n\n(APESTutorial) pkg>","category":"page"},{"location":"","page":"Home","title":"Home","text":"Install the package to this new project environment from GitHub by running the following command:","category":"page"},{"location":"","page":"Home","title":"Home","text":"(APESTutorial) pkg> add https://github.com/ElOceanografo/ProbabilisticEchoInversion.jl.git","category":"page"},{"location":"","page":"Home","title":"Home","text":"Once it has downloaded and precompiled, you can exit the package manager by hitting backspace. Load the package, and you're ready to go!","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using ProbabilisticEchoInversion","category":"page"},{"location":"","page":"Home","title":"Home","text":"[2] You don't strictly need to create a local environment, and can install  ProbabilisticEchoInversion into the top-level Julia environment (i.e., (@v1.8) instead  of APESTutorial). This will make it available automatically for all projects. However, the more packages you install in the top-level environment, the more likely you are to end up with conflicting versions and dependencies. In our experience, working with local environments is much easier in the long runâ€“and as a pleasant side effect, it makes it  much easier to reproduce your analyses, since all the precise package versions you used are recorded automatically in the Project.toml and Manifest.toml files.","category":"page"},{"location":"#Loading-and-arranging-your-data","page":"Home","title":"Loading and arranging your data","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"In a nutshell, you arrange your acoustic data in a multidimensional DimArray from  DimensionalData.jl.[1] For a typical downard-looking echosounder on a moving ship, your  data would have three dimensions, depth x distance x frequency. You then specify the inverse  problem you want to solve using the modeling language Turing.jl, and then use  ProbabilisticEchoInversion to apply it to each depth/distance cell in your data.","category":"page"},{"location":"","page":"Home","title":"Home","text":"[1] (DimArrays behave like normal Julia arrays, but also  let you index with named dimensions and have a bunch of nice functionality for subsetting and plotting.) ","category":"page"},{"location":"#Defining-the-model","page":"Home","title":"Defining the model","text":"","category":"section"},{"location":"#","page":"Home","title":"","text":"","category":"section"},{"location":"#More-Advanced-Examples","page":"Home","title":"More Advanced Examples","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Because the inverse model is defined in Turing.jl's modeling language, APES is incredibly flexible in terms of the data and situations to which it can be applied. For a more in- depth look at some of its capabilities, please check out the fully-worked example  problems in the APESExamples repository. These reproduce the analyses and figures in Urmy et al. 20**, and include:","category":"page"},{"location":"","page":"Home","title":"Home","text":"A simulated fish/zooplankton mixture, demonstrating how to solve simultaneously for ","category":"page"},{"location":"","page":"Home","title":"Home","text":"scatterer size and density,","category":"page"},{"location":"","page":"Home","title":"Home","text":"A simulated mesopelagic scattering layer, demonstrating how to use ground-truth data to","category":"page"},{"location":"","page":"Home","title":"Home","text":"constrain the solution of an underdetermined inverse problem,","category":"page"},{"location":"","page":"Home","title":"Home","text":"An application of APES to a variety of mixed scattering types at the Aleutian shelfbreak","category":"page"},{"location":"","page":"Home","title":"Home","text":"in the Gulf of Alaska,","category":"page"},{"location":"","page":"Home","title":"Home","text":"And an application of APES to broadband backscatter from zooplankton and fish of mixed ","category":"page"},{"location":"","page":"Home","title":"Home","text":"sizes in Barnabas Trough, south of Kodiak Island.","category":"page"},{"location":"#Using,-Citing,-and-Contributing","page":"Home","title":"Using, Citing, and Contributing","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This software was developed by Sam Urmy at NOAA's Alaska Fisheries Science Center. As a  product of the U.S. Government, it is free for anyone to use under a Creative Commons CC0 license. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"ProbabilisticEchoInversion.jl has been tested and peer-reviewed, but should still be considered research-grade beta software rather than fully production-ready. If you try  it on your own data, please do submit bug reports, comments, and feature requests via the project's GitHub repository. Pull requests are welcome, both for code and documentation!","category":"page"},{"location":"","page":"Home","title":"Home","text":"Finally, if you do use APES in your own work, please cite the following publication:","category":"page"},{"location":"","page":"Home","title":"Home","text":"TK","category":"page"},{"location":"#API","page":"Home","title":"API","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [ProbabilisticEchoInversion]","category":"page"},{"location":"#ProbabilisticEchoInversion.MAPMCMCSolver","page":"Home","title":"ProbabilisticEchoInversion.MAPMCMCSolver","text":"MAPMCMCSolver([;optimizer, options])\n\nConstruct an MAPMCMCSolver, specifying how to invert a probabilistic backscattering model using a combination of maximum a posteriori optimization and Markov-chain Monte  Carlo. This simply means that an optimization routine finds the MAP point estimate of the parameters, which is then used as the starting point for the MCMC run.\n\nArguments correspond exactly to the ones for MAPSolver and MCMCSolver; refer to  their documentation for details.\n\n\n\n\n\n","category":"type"},{"location":"#ProbabilisticEchoInversion.MAPSolver","page":"Home","title":"ProbabilisticEchoInversion.MAPSolver","text":"MAPSolver([;optimizer, options])\n\nConstruct a MAPSolver, specifying how to invert a probabilistic backsattering model using maximum a-posteriori optimization.  Default optimizer is L-BFGS. See Turing.jl and Optim.jl documentation for more information on available solvers and options.\n\n\n\n\n\n","category":"type"},{"location":"#ProbabilisticEchoInversion.MCMCSolver","page":"Home","title":"ProbabilisticEchoInversion.MCMCSolver","text":"MCMCSolver([;sampler, parallel, nsamples, nchains; kwargs, verbose])\n\nConstruct an MCMCSolver, specifying how to invert a probabilistic backscattering model using Markov-chain Monte Carlo. By default uses the no-U-turn sampler with  acceptance rate 0.8 and collects 1000 samples. See Turing.jl documentation for more information on options for MCMC sampling.\n\n\n\n\n\n","category":"type"},{"location":"#ProbabilisticEchoInversion.apes-Tuple{DimensionalData.DimArray, Function, AbstractSolver}","page":"Home","title":"ProbabilisticEchoInversion.apes","text":"apes(echogram, model, solver[; params, result_handler, safe_precision, distributed])\n\nRun the automatic probabilistic echo solver defined by the inverse model and  solution method solver on the acoustic backstter data in echogram.\n\nArguments\n\nechogram::DimArray: Acoustic backscatter data in the linear domain (i.e.,   volume backsattering coefficient s_v, area backsattering coefficient s_a,   or nautical area scattering coefficient, NASC). The last dimension of    the DimArray should be named :F and index the acoustic frequencies;    all other dimensions should reference spatial/temporal coordinates.\nmodel::Function: Probabilistic inverse model defined with Turing.jl   or DynamicPPL.jl. This model should have the signature model(data, params),   where data and params contain the acoustic data and any additional   parameters. See below for more details.\nsolver::AbstractSolver: The method used to solve the inverse problem   specified in model. See MCMCSolver and MAPSolver for more detail.\nparams: Optional additional params to pass to model.\nresult_handler: Optional function to transform the output of the solver    before (for instance, by calculating the means of a Markov chain).\ndistributed::Bool=false: Whether to use all available processors when    fitting model to echogram cells.\n\nDetails\n\nThis function applies a probabilistic inverse backscattering model defined using Turing.jl to each spectrum in a mulifrequency echogram. The model's constructor must accept two arguments:\n\ndata: A NamedTuple or other structure accessible by dot-notation, with   fields coords, freqs, and backscatter. These contain the observed   acoustic data. The model doesn't have to use all of them.\nparams: Optional NamedTuple or other object, containing any constants or   auxiliary information used by the model.\n\n\n\n\n\n","category":"method"},{"location":"#ProbabilisticEchoInversion.iterspectra","page":"Home","title":"ProbabilisticEchoInversion.iterspectra","text":"iterspectra(echogram[, freqdim])\n\nGiven an mulifrequency or broadband echogram in the form of a DimArray, with the acoustic frequencies in one dimension (by default named :F), iterate over each spectrum. The iterator yields NamedTuples with three fields: \n\ncoords: Coordinates of the spectrum on the non-:F dimensions of the Array   (i.e. its location space/time)\nfreqs: Array of acoustic frequencies\nbackscatter: Array of backscatter values\n\n\n\n\n\n","category":"function"},{"location":"#ProbabilisticEchoInversion.mapspectra-Tuple{Any, DimensionalData.DimArray}","page":"Home","title":"ProbabilisticEchoInversion.mapspectra","text":"mapspectra(f, echogram[; freqdim, distributed])\n\nMap the function f over each spectrum in the DimArray echogram. By default assumes the acoustic frequencies are recorded in dimension :F, if this is not the case, specify the name of the dimension using the freqdim argument.\n\n\n\n\n\n","category":"method"},{"location":"#ProbabilisticEchoInversion.solve","page":"Home","title":"ProbabilisticEchoInversion.solve","text":"solve(data, model, solver[, params])\n\nRun the probabilistic inverse model defined by model on the acoustic backscatter spectrum in data, using solver as the inference engine.\n\n\n\n\n\n","category":"function"}]
}
