var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = ProbabilisticEchoInversion","category":"page"},{"location":"#ProbabilisticEchoInversion.jl","page":"Home","title":"ProbabilisticEchoInversion.jl","text":"","category":"section"},{"location":"#Introduction","page":"Home","title":"Introduction","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Welcome to the documentation for ocumentation for  ProbabilisticEchoInversion!","category":"page"},{"location":"","page":"Home","title":"Home","text":"This package is designed to solve the \"inverse problem\" for acoustic backscatter at multiple frequencies in a Bayesian statistical framework. In other words, given observed  echoes from one or more types of scatterers, this package will help you infer","category":"page"},{"location":"","page":"Home","title":"Home","text":"What they were,\nHow many of them were present, and\nHow sure you can be about (1) and (2). ","category":"page"},{"location":"","page":"Home","title":"Home","text":"We call this approach Automatic Probabilistic Echo Solving, or APES.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This documentation provides a short introduction to the problem and general approach, as well as a simple tutorial on how to use the package. It assumes basic familiarity with the principles of fisheries acoustics and Bayesian statistical modeling (e.g. experience with Turing.jl, Stan, or JAGS). While the package is written in Julia, we don't assume prior Julia knowledge, and you should hopefully be able to follow along if you are familiar with scientific programming in a similar scripting language like R, Python, or Matlab.  Extensive resources for learning Julia are available at the official website.","category":"page"},{"location":"#Background","page":"Home","title":"Background","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The typical approach in fisheries acoustics is to use relative differences in backscatter strength at multiple frequencies to classify parts of the water column as one thing or another (fish vs. zooplankton, large vs. small fish, etc.). These frequency responses are usually calculated by substracting backscatter at two different frequencies in the decibel domain  (\"dB differencing\"). Once the echogram has been classified using multifrequency information, scatterer density is estimated by echo-integrating at a single frequency, using the  relationship ","category":"page"},{"location":"","page":"Home","title":"Home","text":"s_v = langle sigma_bs rangle n","category":"page"},{"location":"","page":"Home","title":"Home","text":"(1)","category":"page"},{"location":"","page":"Home","title":"Home","text":"where s_v is the volume backscattering coefficient, langle sigma_bs rangle is the average backscattering cross section of a single scatterer, and n is their numerical density.","category":"page"},{"location":"#The-Inverse-Approach","page":"Home","title":"The Inverse Approach","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The inverse approach relies on the same theory and assumptions, but instead of classifying  first using multiple frequencies and then integrating using only one, it does both at the  same time, using all frequencies available. Mathematically, if we have a vector of  backscatter at multiple frequencies mathbfs_v, and a matrix Sigma of backscattering cross-sections, where the ij^th entry holds langle sigma_bs rangle for species j at frequency i, then solving the inverse problem means finding the vector of scatterer densities mathbfn ge 0 that solves the equation ","category":"page"},{"location":"","page":"Home","title":"Home","text":"mathbfs_v = Sigma mathbfn","category":"page"},{"location":"","page":"Home","title":"Home","text":"(2)","category":"page"},{"location":"","page":"Home","title":"Home","text":"The inverse approach has several advantages over the classify-then-integrate approach:","category":"page"},{"location":"","page":"Home","title":"Home","text":"It uses all available frequency information to integrate, in theory giving a more robust estimate of animal density than single-frequency integration.\nIt extends naturally from a small number of narrowband frequencies to broadband spectra, or a mixture of the two.\nIt can handle mixtures of different scatterers, a situation where dB differencing struggles.","category":"page"},{"location":"","page":"Home","title":"Home","text":"However, even though the inverse approach has been around for some time, it has never acheived widespread use in practice, because Equation 2 is often (if not usually) underdetermined, and it involves inherent uncertainties that are nonlinear and  potentially difficult to quantify.","category":"page"},{"location":"#Bayesian-Inverse-Modeling","page":"Home","title":"Bayesian Inverse Modeling","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"One way to address these challenges is to implement the inverse problem as a Bayesian statistical model. Like all inversion methods, a Bayesian approach handles species mixtures, uses all available frequencies, and extends naturally to broadband signals. However, it has  a few distinct advantages. The priors required for a Bayesian model provide a rigorous way to incorporate assumptions, ecological knowledge, and/or data from direct  sampling. Good priors provide the inverse model with additional information, improving the quality of the solution and allowing even underdetermined problems to be solved. Bayesian models can incorporate multiple sources of uncertainty and propagate them through to the solution, increasing the robustness ofthe results: a well-specified  model should not produce solutions that are simultaneously wrong and confident. Finally, these models are based on physical scattering processes, so their output is fully interpretable, unlike some machine learning methods. Taken together, these  advantages make the inverse approach robust and reliable enough to be used on real-world acoustic data.","category":"page"},{"location":"#Tutorial","page":"Home","title":"Tutorial","text":"","category":"section"},{"location":"#Installation-and-setup","page":"Home","title":"Installation and setup","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"ProbabilisticEchoInversion.jl is a Julia package, so if you have not installed the Julia  programming language, that's the first thing to do. You can download the latest version for free from the official website. Even better, use the Juliaup installer/version manager, which  makes it much easier to upgrade when new Julia versions are released.","category":"page"},{"location":"","page":"Home","title":"Home","text":"You can work with Julia files in any text editor, but for a nice integrated experience, we can recommend Visual Studio Code with the  Julia extension, Jupyter, or  Pluto.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Once you have Julia installed, open the Julia command line (a.k.a. the read-evaluate-print-loop, or REPL). While not required, it is easy and highly recommended to set up a local environment  for each of your projects. To do that for this tutorial, run the following commands:","category":"page"},{"location":"","page":"Home","title":"Home","text":"# create a new folder--could call it whatever you want\njulia> mkdir(\"APESTutorial\")\n\n# change directory to the folder we just created\njulia> cd(\"APESTutorial\")\n\n# type `]` to enter package manager mode\njulia> ]\n\n# activate the current directory as project environment\n(@v1.9) pkg> activate .\n\n(APESTutorial) pkg>","category":"page"},{"location":"","page":"Home","title":"Home","text":"Install the package to this new project environment by running the following command:","category":"page"},{"location":"","page":"Home","title":"Home","text":"(APESTutorial) pkg> add ProbabilisticEchoInversion","category":"page"},{"location":"","page":"Home","title":"Home","text":"Note : Using local environmentsYou don't strictly need to create a local environment, and can install ","category":"page"},{"location":"","page":"Home","title":"Home","text":"ProbabilisticEchoInversion into the top-level Julia environment (i.e., (@v1.9) instead  of APESTutorial). This will make it available automatically for all projects. However, the more packages you install in the top-level environment, the more likely you are to end up with conflicting versions and dependencies. In our experience, working with local environments is much easier in the long run–and as a pleasant side effect, it makes it  much easier to reproduce your analyses, since all the precise package versions you used are recorded automatically in the Project.toml and Manifest.toml files.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Once it has downloaded and precompiled, you can exit the package manager by hitting backspace. To run the rest of this tutorial yourself, you'll need the data files located here. Download them to the project directory you just created. You can also download the example.jl script, which contains all the following code in one place.","category":"page"},{"location":"#Loading-and-arranging-your-data","page":"Home","title":"Loading and arranging your data","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"ProbabilisticEchoInversion expects your acoustic data to be arranged in a multidimensional DimArray from DimensionalData.jl. DimArrays behave like normal Julia arrays, but also  let you index with named dimensions and have a bunch of nice functionality for subsetting, slicing, and plotting. For a typical downard-looking echosounder on a moving ship, your  data have three dimensions - depth, distance, and frequency - meaning this array will be  three-dimensional.","category":"page"},{"location":"","page":"Home","title":"Home","text":"If your data are already stored this way, for instance in a NetCDF or .mat file, it will be easy to convert them to a DimArray (refer to the DimensionalData.jl documentation for details). If your data are stored as a table in \"long\" format, as is typical for .CSV exports from Echoview, you will need to do some reshaping first. This package provides a function unstack_echogram to take care of that reshaping.","category":"page"},{"location":"","page":"Home","title":"Home","text":"First, load the required packages.","category":"page"},{"location":"","page":"Home","title":"Home","text":"using ProbabilisticEchoInversion\nusing CSV, DataFrames\nusing DimensionalData, DimensionalData.Dimensions","category":"page"},{"location":"","page":"Home","title":"Home","text":"This tutorial contains five comma-delimited data files, one for each frequency. We read them in, add a frequency column to each one, and use vcat to stack them all into a single DataFrame.","category":"page"},{"location":"","page":"Home","title":"Home","text":"freqs = [18, 38, 70, 120, 200]\necho_df = map(freqs) do f\n    filename = joinpath(@__DIR__, \"DY1702_haul24_$(f)kHz.csv\")\n    df = CSV.read(filename, DataFrame)\n    df[!, :frequency] .= f\n    return df\nend\necho_df = vcat(echo_df...)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Next, we'll transform this data frame into a 3-d DimArray. The unstack_echogram function takes long-format a DataFrame as its first argument. That DataFrame needs to have at least four columns:","category":"page"},{"location":"","page":"Home","title":"Home","text":"An x-coordinate, such as along-track distance or time\nA y-coordinate, such as depth or range from the transducer\nAcoustic frequency, and\nAcoustic mean volume backscatter (can be in linear or decibel units )","category":"page"},{"location":"","page":"Home","title":"Home","text":"The names of these columns are passed to unstack_echogram as the second through fifth arguments, respectively. In this example, the data files are standard .csv exports from Echoview, and the relevant column names are:","category":"page"},{"location":"","page":"Home","title":"Home","text":"echo = unstack_echogram(echo_df, :Dist_M, :Layer_depth_min, :frequency, :Sv_mean)","category":"page"},{"location":"","page":"Home","title":"Home","text":"By default, the axes of echo will be named X, Y, and F. If you'd like to  define your own dimensions, this is easy to do with the @dim macro from DimensionalData.Dimensions. You can then supply them in the optional final three arguments to unstack_echogram and they will be applied to the  DimArray it returns.","category":"page"},{"location":"","page":"Home","title":"Home","text":"@dim Z YDim \"Depth (m)\"\n@dim D XDim \"Distance (km)\"\necho = unstack_echogram(echo_df, :Dist_M, :Layer_depth_min, :frequency, :Sv_mean, D, Z)","category":"page"},{"location":"","page":"Home","title":"Home","text":"It is now easy to manipulate the multifrequency echogram, for instance by selecting a  slice by frequency and plotting it. Refer to the DimensionalData.jl docs to learn more about how to slice and dice DimArrays.","category":"page"},{"location":"","page":"Home","title":"Home","text":"heatmap(echo[F(At(120))], yflip=true)","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: Echogram of example data at 120 kHz)","category":"page"},{"location":"#Defining-the-model","page":"Home","title":"Defining the model","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Once the data are loaded in, we need to define the inverse model we want to solve. This is done using the probabilistic programming language Turing.jl. If you are familiar with BUGS, JAGS, or Stan, model definitions in Turing are conceptually very similar. If  you have not worked with it before, it is worth studying the Turing  documentation before going any further.","category":"page"},{"location":"","page":"Home","title":"Home","text":"A very simple inverse model is defined below.","category":"page"},{"location":"","page":"Home","title":"Home","text":"@model function examplemodel(data, params)\n\n    nfreq, nspp = size(params.TS)\n    Σ = exp10.(params.TS ./ 10)\n\n    # define priors\n    logn ~ arraydist(Normal.(zeros(nspp), fill(3, nspp))) # scatterer log-densities\n    ϵ ~ Exponential(1.0) # observation error variance\n\n    # Predict Sv based on scatterer density and TS\n    n = exp10.(logn)\n    μ = 10log10.(Σ * n)\n\n    # Compare observed to predicted backscatter\n    data.backscatter .~ Normal.(μ, fill(ϵ, nfreq))\nend","category":"page"},{"location":"","page":"Home","title":"Home","text":"To work with APES, your model function must take two arguments. The first, data, is a NamedTuple containing acoustic data and metadata from a single cell. These data tuples will be generated automatically when you run the analysis using the apes function (described below), and will contain three fields, all accessible using dot-notation:","category":"page"},{"location":"","page":"Home","title":"Home","text":"data.backscatter : Vector of backscatter values (in whatever units you defined your echo array)\ndata.freqs : Vector of frequencies at which backscatter was recorded\ndata.coords : Spatial/temporal coordinates of the cell within the echo array","category":"page"},{"location":"","page":"Home","title":"Home","text":"You can use any of these fields inside the model, but data.backscatter is the only one  you must use, since it contains the actual observations.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The second argument, params is for any constants or auxiliary information you want to pass to the model. It will typically be a NamedTuple, but can be any data type you want. If your model doesn't need any other info, just supply an empty tuple ().  Here, we'll use params to hold a single item, a matrix of target strengths (TS).","category":"page"},{"location":"","page":"Home","title":"Home","text":"This model assumes a fixed number of scattering classes are present, each with a known TS spectrum. It puts a vague prior on their log-densities, and assumes a single error variance for all frequencies. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"Note : Writing models in the log-domainNote that this model is defined in the logarithmic domain - that is, the scatterer densities are written as log-densities, and the observed data are assumed to be decibel-valued mean volume backscattering strengths (S_v) instead of linear mean volume backscattering coefficients (s_v). While not strictly required, defining your models this way is a really good idea. The small absolute values and wide ranges of both scatterer densities and observed backscatter means that linear-domain models often have problems with floating-point precision that can manifest in inefficient and/or incorrect inference.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The last step in setting up our model is to choose our candidate scatterers and construct the TS matrix. A research trawl performed at this location found a mixture of Alaska pollock (Gadus chalcogrammus), unidentified lanternfish, and Pacific glass shrimp (Pasiphaea pacifica). We will assume these were the main scatterers present and define three plausible TS spectra at our five frequencies. We then concatenate them into a matrix and wrap it in a named tuple.","category":"page"},{"location":"","page":"Home","title":"Home","text":"TS_pollock = [-34.6, -35.0, -35.6, -36.6, -38.5]\nTS_myctophid = [-73.0, -58.0, -65, -67.2, -70.0]\nTS_shrimp = [-100, -90, -82, -76.2, -73.7]\nTS = [TS_pollock TS_myctophid TS_shrimp]\nparams = (; TS)\n\nplot(freqs, TS, marker=:o, label=[\"Pollock\" \"Myctophid\" \"Shrimp\"],\n    xlabel=\"Frequency (kHz)\", ylabel=\"TS (dB re m⁻²)\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: TS spectra of pollock, myctophids, and shrimp)","category":"page"},{"location":"#Running-the-model","page":"Home","title":"Running the model","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Once the data, parameters, and model are all set up, running it is just one line of code.","category":"page"},{"location":"","page":"Home","title":"Home","text":"solution_mcmc = apes(echo, examplemodel, MCMCSolver(), params=params)","category":"page"},{"location":"","page":"Home","title":"Home","text":"This will draw 1,000 samples from the joint posterior of the model for each acoustic cell, using the No-U-Turn Sampler (NUTS) from Turing. Any cells where all backscatter values are missing (e.g., below-bottom cells) will be skipped. Altogether, the inference will take on the order of 5-20 minutes to finish, depending on your machine.","category":"page"},{"location":"","page":"Home","title":"Home","text":"If you don't have time to wait for (asymptotically) exact inference, you can opt for a much faster option: maximum-a-posteriori optimization, with errors estimated via the delta method. This is done by changing the solver argument to MAPSolver(). Inference in this case takes just a few seconds.","category":"page"},{"location":"","page":"Home","title":"Home","text":"solution_map = apes(echo, examplemodel, MAPSolver(), params=params)","category":"page"},{"location":"","page":"Home","title":"Home","text":"In either case (MCMC chains or optimization fits) the results are returned in a DimArray that shares the first two dimensions as echo, so they are also easy to manipulate and  plot. For instance, arrays of posterior means and standard deviations can be obtained this way,","category":"page"},{"location":"","page":"Home","title":"Home","text":"post_mean = passmissing(chn -> mean(Array(chn), dims=2)).(solution_mcmc);\npost_cv = passmissing(chn -> cv(Array(chn), dims=2)).(solution_mcmc);","category":"page"},{"location":"","page":"Home","title":"Home","text":"where we use passmissing to deal with the fact that some of the result cells contain MCMC chains and some are missing.","category":"page"},{"location":"#More-Advanced-Examples","page":"Home","title":"More Advanced Examples","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Because the inverse model is defined in Turing.jl's modeling language, APES is incredibly flexible in terms of the data and situations to which it can be applied. For a more in- depth look at some of its capabilities, please check out the fully-worked example  problems in the APESExamples repository. These reproduce the analyses and figures in Urmy et al. 20**, and include:","category":"page"},{"location":"","page":"Home","title":"Home","text":"A simulated fish/zooplankton mixture, demonstrating how to solve simultaneously for scatterer size and density,\nA simulated mesopelagic scattering layer, demonstrating how to use ground-truth data to constrain the solution of an underdetermined inverse problem,\nAn application of APES to a variety of mixed scattering types at the Aleutian shelfbreak","category":"page"},{"location":"","page":"Home","title":"Home","text":"in the Gulf of Alaska, ","category":"page"},{"location":"","page":"Home","title":"Home","text":"And an application of APES to broadband backscatter from zooplankton and fish of mixed ","category":"page"},{"location":"","page":"Home","title":"Home","text":"sizes in Barnabas Trough, south of Kodiak Island.","category":"page"},{"location":"#Using,-Citing,-and-Contributing","page":"Home","title":"Using, Citing, and Contributing","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This software was developed by Sam Urmy at NOAA's Alaska Fisheries Science Center. As a  product of the U.S. Government, it is free for anyone to use under a public-domain Creative Commons CC0 license. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"ProbabilisticEchoInversion.jl has been tested and peer-reviewed, but should still be considered research-grade beta software rather than fully production-ready. If you try  it on your own data, please do submit bug reports, comments, and feature requests via the project's GitHub repository. Pull requests are welcome, both for code and documentation!","category":"page"},{"location":"","page":"Home","title":"Home","text":"Finally, if you do use APES in your own work, please cite the following publication:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Urmy, De Robertis, and Bassett (2023). A Bayesian inverse approach to identify and quantify organisms from fisheries acoustic data. ICES Journal of Marine Science,  https://doi.org/10.1093/icesjms/fsad102","category":"page"},{"location":"#API","page":"Home","title":"API","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [ProbabilisticEchoInversion]","category":"page"},{"location":"#ProbabilisticEchoInversion.MAPMCMCSolver","page":"Home","title":"ProbabilisticEchoInversion.MAPMCMCSolver","text":"MAPMCMCSolver([;optimizer, options])\n\nConstruct an MAPMCMCSolver, specifying how to invert a probabilistic backscattering model using a combination of maximum a posteriori optimization and Markov-chain Monte  Carlo. This simply means that an optimization routine finds the MAP point estimate of the parameters, which is then used as the starting point for the MCMC run.\n\nArguments correspond exactly to the ones for MAPSolver and MCMCSolver; refer to  their documentation for details.\n\n\n\n\n\n","category":"type"},{"location":"#ProbabilisticEchoInversion.MAPSolver","page":"Home","title":"ProbabilisticEchoInversion.MAPSolver","text":"MAPSolver([;optimizer, options])\n\nConstruct a MAPSolver, specifying how to invert a probabilistic backsattering model using maximum a-posteriori optimization.  Default optimizer is LBFGS. See Turing.jl and Optim.jl documentation for more information on available solvers and options.\n\n\n\n\n\n","category":"type"},{"location":"#ProbabilisticEchoInversion.MCMCSolver","page":"Home","title":"ProbabilisticEchoInversion.MCMCSolver","text":"MCMCSolver([;sampler, parallel, nsamples, nchains; kwargs, verbose])\n\nConstruct an MCMCSolver, specifying how to invert a probabilistic backscattering model using Markov-chain Monte Carlo. By default uses the no-U-turn sampler with  acceptance rate 0.8 and collects 1000 samples. See Turing.jl documentation for more information on options for MCMC sampling.\n\n\n\n\n\n","category":"type"},{"location":"#ProbabilisticEchoInversion.apes-Tuple{DimensionalData.DimArray, Function, AbstractSolver}","page":"Home","title":"ProbabilisticEchoInversion.apes","text":"apes(echogram, model, solver[; params, result_handler, safe_precision, distributed])\n\nRun the automatic probabilistic echo solver defined by the inverse model and  solution method solver on the acoustic backstter data in echogram.\n\nArguments\n\nechogram::DimArray: Acoustic backscatter data in the linear domain (i.e.,   volume backsattering coefficient s_v, area backsattering coefficient s_a,   or nautical area scattering coefficient, NASC). The last dimension of    the DimArray should be named :F and index the acoustic frequencies;    all other dimensions should reference spatial/temporal coordinates.\nmodel::Function: Probabilistic inverse model defined with Turing.jl   or DynamicPPL.jl. This model should have the signature model(data, params),   where data and params contain the acoustic data and any additional   parameters. See below for more details.\nsolver::AbstractSolver: The method used to solve the inverse problem   specified in model. See MCMCSolver and MAPSolver for more detail.\nparams: Optional additional params to pass to model.\nresult_handler: Optional function to transform the output of the solver    before (for instance, by calculating the means of a Markov chain).\ndistributed::Bool=false: Whether to use all available processors when    fitting model to echogram cells.\n\nDetails\n\nThis function applies a probabilistic inverse backscattering model defined using Turing.jl to each spectrum in a mulifrequency echogram. The model's constructor must accept two arguments:\n\ndata: A NamedTuple or other structure accessible by dot-notation, with   fields coords, freqs, and backscatter. These contain the observed   acoustic data. The model doesn't have to use all of them.\nparams: Optional NamedTuple or other object, containing any constants or   auxiliary information used by the model.\n\n\n\n\n\n","category":"method"},{"location":"#ProbabilisticEchoInversion.iterspectra","page":"Home","title":"ProbabilisticEchoInversion.iterspectra","text":"iterspectra(echogram[, freqdim])\n\nGiven an mulifrequency or broadband echogram in the form of a DimArray, with the acoustic frequencies in one dimension (by default named :F), iterate over each spectrum. The iterator yields NamedTuples with three fields: \n\ncoords: Coordinates of the spectrum on the non-:F dimensions of the Array   (i.e. its location space/time)\nfreqs: Array of acoustic frequencies\nbackscatter: Array of backscatter values\n\n\n\n\n\n","category":"function"},{"location":"#ProbabilisticEchoInversion.mapspectra-Tuple{Any, DimensionalData.DimArray}","page":"Home","title":"ProbabilisticEchoInversion.mapspectra","text":"mapspectra(f, echogram[; freqdim, distributed])\n\nMap the function f over each spectrum in the DimArray echogram. By default assumes the acoustic frequencies are recorded in dimension :F, if this is not the case, specify the name of the dimension using the freqdim argument.\n\n\n\n\n\n","category":"method"},{"location":"#ProbabilisticEchoInversion.solve","page":"Home","title":"ProbabilisticEchoInversion.solve","text":"solve(data, model, solver[, params])\n\nRun the probabilistic inverse model defined by model on the acoustic backscatter spectrum in data, using solver as the inference engine.\n\n\n\n\n\n","category":"function"}]
}
